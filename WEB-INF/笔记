Spring
    开源的设计层的框架
      业务逻辑层和各层之间的耦合问题。
        spring是面向切面的编程贯穿了整个项目

     IOC
        描述:
            控制反转
              如之前，创建对象是程序员来进行创建对象，学习spring这些对象就交给Spring来进行完成
              隔壁老陈，地主大儿子  ，丫鬟
     DI
         依赖注入
            如
             users.setAge(11);//这些设置参数值，之前是程序员完成，spring帮我我设置参数
              set注入
              属性值注入
              构造函数注入

              值类型注入
              应用类型注入





        AOP
           面向切面编程

         连接点  joinpoint
             目标对象中所有都可以增加方法的叫做连接点

         切入点(Pointcut)
            目标对象已经增强的方法，叫做切入点

         通知(Advice)
            前置通知
                目标方法之前使用
            后置通知
               目标方法运行后进行调用
            异常通知
                出现异常就会进行调用
            最终通知
               无论是否出现异常都会进行调用
            环绕通知
               目标方法之前前后进行调用
          目标对象(Target)
             代理的目标对象(被代理的对象)
          织入(Weaving)
              将通知应用到切入点过程就是织入
          代理(Proxy)
             将通知织入到目标对象之后，形成的代理对象
           切面(Aspect)
              切入点和通知的结合

AOP的案例
   日志的案列






事务
   就是多条SQ语句同时向数据库中添加数据，要么一起成功要么一起失败
    之前写的事务，需要手动提交
         如:
          int i=0;
            Connection conn=null;
            try {
                conn= C3p0Util.getConn();

                conn.setAutoCommit(false);//设置为手动提交

                 conn.commit();//手动提交
                conn.setAutoCommit(true);//设置为自动提交
           由于之前使用手动提交事务,不便于开发，将事务给spring管理，

     使用spring配置事务案列


